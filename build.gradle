apply plugin: 'java'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.5'
        classpath group: 'org.zeroturnaround', name: 'zt-zip', version: '1.9'
    }
}

allprojects {
    apply plugin: 'java'
    
    ext.android_platform = "$sdkdir/platforms/android-$sdkver"
    ext.android_tools_lib = "$sdkdir/platforms/android-$sdkver/tools/lib"
    ext.core_jar_path = "$rootDir/mode/processing-core.zip"

    repositories {
        jcenter()
        flatDir dirs: "$rootDir/libs/core/library"
        flatDir dirs: "$rootDir/libs/core/build/libs"
        flatDir dirs: "$rootDir/libs/vr/library"
        flatDir dirs: "$sdkdir/tools/lib"        
        flatDir dirs: android_platform
        flatDir dirs: android_tools_lib
    }

    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

dependencies {
    compile name: 'android'
    compile project(":mode") 
    compile project(":libs:core")
    compile project(":libs:vr")
}

import java.nio.file.Files
import org.zeroturnaround.zip.ZipUtil
import org.apache.commons.io.FileUtils
import static java.nio.file.StandardCopyOption.*;

task dist {
    try {
        def root = "$buildDir/zip/AndroidMode"
        
        // Copy assets to build dir
        FileUtils.copyDirectory(file("mode/templates"), file("$root/templates"))
        FileUtils.copyDirectory(file("mode/examples"), file("$root/examples"))
        FileUtils.copyDirectory(file("mode/icons"), file("$root/icons"))
        FileUtils.copyDirectory(file("mode/mode"), file("$root/mode"))
        FileUtils.copyDirectory(file("mode/theme"), file("$root/theme"))
                   
        Files.copy(file("libs/core/build/libs/processing-core.zip").toPath(),
                   file("$root/processing-core.zip").toPath(), REPLACE_EXISTING);

        Files.copy(file("mode/mode.properties").toPath(),
                   file("$root/mode.properties").toPath(), REPLACE_EXISTING);

        FileUtils.copyDirectory(file("tools/SDKUpdater/tool"), 
                                file("$root/tools/SDKUpdater/tool"))
        FileUtils.copyDirectory(file("tools/SDKUpdater/src"), 
                                file("$root/tools/SDKUpdater/src"))
        
        FileUtils.copyDirectory(file("libs/vr/examples"), 
                                file("$root/libs/vr/examples"))
        FileUtils.copyDirectory(file("libs/vr/gvrsdk"), 
                                file("$root/libs/vr/gvrsdk"))
        FileUtils.copyDirectory(file("libs/vr/library"), 
                                file("$root/libs/vr/library"))
        FileUtils.copyDirectory(file("libs/vr/src"), 
                                file("$root/libs/vr/src"))
        Files.copy(file("libs/vr/library.properties").toPath(),
                   file("$root/libs/vr/library.properties").toPath(), REPLACE_EXISTING);                             

        ZipUtil.pack(file("$buildDir/zip"), new File("release/AndroidMode.zip"))        
        Files.copy(file("mode/mode.properties").toPath(),
                   file("release/AndroidMode.txt").toPath(), REPLACE_EXISTING);
    } catch (Exception ex) {
        logger.error ex.getMessage()
    }
}

dist.dependsOn build