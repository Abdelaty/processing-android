apply plugin: 'java'

buildscript {
    repositories {
//        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.5'
        classpath group: 'org.zeroturnaround', name: 'zt-zip', version: '1.9'
    }
}

// Find location of android jar relative to ANDROID_HOME
def android_platform = "$sdkdir/platforms/android-$sdkver"
def core_libs_path = "../../core/build/libs"

// Check to see if required API exists
// TODO: Look for any higher SDK and use it.
if (!file(android_platform).exists()) {
    logger.error "Android SDK $sdkver could not be found in $sdkdir"
}

repositories {
        //jcenter()
        flatDir {dirs 'lib', core_libs_path, android_platform}
}

dependencies {
    compile name: 'android'
    compile name: 'core' 
    compile name: 'gvr-base'
    compile name: 'gvr-common'
    compile name: 'gvr-audio'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
        resources {
            srcDirs = ['src/']
        }        
    }
}

// Create Jar
jar {    
    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Gradle-Version": "$gradle.gradleVersion"
        )
    }
}

clean.doFirst {
//    delete "$core_jar_path"
}

import groovy.util.AntBuilder
import java.nio.file.Files
import static java.nio.file.StandardCopyOption.*;

task dist {
    doLast {
        // make copy of jar file as zip
//        Files.copy(file("$buildDir/libs/core.jar").toPath(),
//                   file("$buildDir/libs/android-core.zip").toPath(), REPLACE_EXISTING);
                   
//        Files.copy(file("$buildDir/libs/core.jar").toPath(),
//                   file("$core_jar_path").toPath(), REPLACE_EXISTING);                   
    }
}

dist.dependsOn build