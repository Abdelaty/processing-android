import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;

apply plugin: 'java'
apply plugin: 'java-library'

dependencies {

    def PROCESSING_VERSION = '3.3.7'
    compile group: 'org.processing', name: 'core', version: "$PROCESSING_VERSION"
    compile group: 'org.processing', name: 'pde', version: "$PROCESSING_VERSION"
    compile group: 'org.processing', name: 'java-mode', version: "$PROCESSING_VERSION"

    
    def TOOLING_VERSION = '4.3'
    compileOnly "org.gradle:gradle-tooling-api:$TOOLING_VERSION"
}

// This task copies the gradle tooling jar into the mode folder
task copyToLib(type: Copy) {
  from configurations.compileOnly.files
  into "mode"
}
build.dependsOn(copyToLib)

sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
    }
}

task permissions(type:Exec) {
   // This task retrieves the latest list of Android permissions and adds them
   // to the Permissions.java file. The python scripts requries BeautifulSoup
   workingDir 'scripts'
   commandLine 'python', 'permissions.py'
} 

task wrapper(type: Wrapper) {
   gradleVersion = '4.4.1' //version required
}
wrapper.doLast {
  File wrapperFolder = file("mode/gradlew");
  wrapperFolder.mkdirs();
  file("gradle").renameTo(file("mode/gradlew/gradle"))
  file("gradlew").renameTo(file("mode/gradlew/gradlew"))
  file("gradlew.bat").renameTo(file("mode/gradlew/gradlew.bat"))

  println("Done with creating wrapper")
}
task myZip(type: Zip) {
   from 'mode/gradlew/'
   include '*'
   include '*/*' //to include contents of a folder present inside Reports directory
   archiveName 'gradlew.zip'
   destinationDir(file('mode'))
}

task updateGradlew(type:Exec) {
   // This task retrieves the latest list of Android permissions and adds them
   // to the Permissions.java file. The python scripts requries BeautifulSoup
   workingDir 'scripts'
   commandLine 'python', 'update-permissions.py'
} 

build.doLast {
    Files.copy(file("$buildDir/libs/mode.jar").toPath(),
               file("mode/AndroidMode.jar").toPath(), REPLACE_EXISTING);
}
