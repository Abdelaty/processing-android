buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.5'
        classpath group: 'org.zeroturnaround', name: 'zt-zip', version: '1.9'
    }
}
apply plugin: 'maven'

dependencies {
    compile name: 'android'
    compile name: 'support-compat-25.3.1'
    compile name: 'support-fragment-25.3.1'
    compile name: 'support-annotations-25.3.1'
    compile name: 'wearable-2.0.5'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
        resources {
            srcDirs = ['assets/']
        }        
    }
}

jar {    
    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Gradle-Version": "$gradle.gradleVersion"
        )
    }
}

clean.doFirst {
    delete "$core_jar_path"
}

import groovy.util.AntBuilder
import java.nio.file.Files
import static java.nio.file.StandardCopyOption.*;

// Creates the pom file, but for now let's just use the template in the core folder
task createPom {
    pom {
       project {
           groupId 'org.p5android'
           artifactId 'processing-core'
           version '4.0.1'
           packaging 'jar'
           licenses {
               license {
                   name 'GNU Lesser General Public License, version 2.1'
                   url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                   distribution 'repo'
               }
           }
        }
    }.writeTo("$buildDir/libs/core.pom")        
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Does not work because of Processing-specific tags in source code, such as @webref
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
//     archives javadocJar
    archives sourcesJar
}

jar.doLast { task ->
    ant.checksum file: task.archivePath
}

build.doLast {
    // make copy of jar file as zip
    Files.copy(file("$buildDir/libs/core.jar").toPath(),
               file("$buildDir/libs/processing-core.zip").toPath(), REPLACE_EXISTING);
                   
    // and copy it to root
    Files.copy(file("$buildDir/libs/core.jar").toPath(),
               file("$core_jar_path").toPath(), REPLACE_EXISTING);                   
}
