import java.nio.file.Files
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

apply plugin: 'maven'

/*
// Custom aar configuration needed to use aar files as dependencies in a pure java 
// library project, lifted from the following repo:
// https://github.com/nekocode/Gradle-Import-Aar
configurations {
    aar {
        attributes {
            attribute(ARTIFACT_FORMAT, ArtifactTypeDefinition.JAR_TYPE)
        }

        // Add the aar inner jars to the compileClasspath
        sourceSets.main.compileClasspath += it

        // Put our custom dependencies onto IDEA's PROVIDED scope
        apply plugin: "idea"
        idea.module.scopes.PROVIDED.plus += [it]
    }
}

dependencies {
    // Transforamtions to extract the classes.jar in the aar package
    def explodedAarType = ArtifactType.EXPLODED_AAR.getType()
    registerTransform {
        from.attribute(ARTIFACT_FORMAT, AndroidArtifacts.TYPE_AAR)
        to.attribute(ARTIFACT_FORMAT, explodedAarType)
        artifactTransform(ExtractAarTransform)
    }

    registerTransform {
        from.attribute(ARTIFACT_FORMAT, explodedAarType)
        to.attribute(ARTIFACT_FORMAT, "classes.jar")
        artifactTransform(AarTransform) { params(ArtifactType.JAR) }
    }

    registerTransform {
        from.attribute(ARTIFACT_FORMAT, "classes.jar")
        to.attribute(ARTIFACT_FORMAT, ArtifactTypeDefinition.JAR_TYPE)
        artifactTransform(ClassesJarArtifactTransform)
    }

    compileOnly name: "android"

    aar "com.android.support:support-v4:${supportLibsVersion}"
    aar "com.google.android.support:wearable:${wearVersion}"
}

class ClassesJarArtifactTransform extends ArtifactTransform {
    @Override
    List<File> transform(File file) {
        println "Transforming---------------------------------" 
        print "SRC "
        println file      
        final String[] names = file.getPath().split(Pattern.quote(File.separator))
        final String aarName = names[names.length - 4].replace(".aar", "")
        final File renamedJar = new File(getOutputDirectory(), aarName + ".jar")
        renamedJar << file.bytes
        print "DST "
        println renamedJar
        println "----------------------------------------DONE"        
        return ImmutableList.of(renamedJar)
    }
}
*/

// Apply the plugin
apply plugin: 'GreetingPlugin'

dependencies {
    implementation name: "android"

    implementationAar "com.android.support:support-v4:${supportLibsVersion}"
    implementationAar "com.google.android.support:wearable:${wearVersion}"  
}

task createPom {
    pom {
       project {
           groupId "org.p5android"
           artifactId "processing-core"
           version "${modeVersion}"
           packaging "jar"
           licenses {
               license {
                   name "GNU Lesser General Public License, version 2.1"
                   url "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt"
                   distribution "repo"
               }
           }
           dependencies {
               dependency {
                   groupId "com.android.support"
                   artifactId "support-v4"
                   version "${supportLibsVersion}"
                   scope "implementation"
               }
               dependency {
                   groupId "com.google.android.support"
                   artifactId "wearable"
                   version "${wearVersion}"
                   scope "implementation"
               }               
           }
        }
    }.writeTo("dist/processing-core-${modeVersion}.pom")
}

sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
        resources {
            srcDirs = ["src/"]
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

// Does not work because of Processing-specific tags in source code, such as @webref
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

artifacts {
//     archives javadocJar
    archives sourcesJar
}

jar.doLast { task ->
    ant.checksum file: task.archivePath
}

clean.doFirst {
    delete "dist"
    delete "${coreZipPath}"
}

compileJava.doFirst {
    String[] deps = ["percent.jar",
                     "recyclerview-v7.jar",
                     "support-compat.jar",
                     "support-core-ui.jar",
                     "support-core-utils.jar",
                     "support-fragment.jar",
                     "support-media-compat.jar",
                     "support-v4.jar",
                     "wearable.jar"]                    
    for (String fn : deps) {
        Files.copy(file("${rootDir}/build/libs/" + fn).toPath(),
                   file("${rootDir}/mode/mode/" + fn).toPath(), REPLACE_EXISTING)
    }
}

build.doLast {
    // Copying core jar as zip inside the mode folder
    Files.copy(file("${buildDir}/libs/core.jar").toPath(),
               file("${coreZipPath}").toPath(), REPLACE_EXISTING)

    // Copying the files for release on JCentral
    File distFolder = file("dist")
    distFolder.mkdirs()
    Files.copy(file("${buildDir}/libs/core.jar").toPath(),
               file("dist/processing-core-${modeVersion}.jar").toPath(), REPLACE_EXISTING)
    Files.copy(file("${buildDir}/libs/core-sources.jar").toPath(),
               file("dist/processing-core-${modeVersion}-sources.jar").toPath(), REPLACE_EXISTING)
    Files.copy(file("${buildDir}/libs/core.jar.MD5").toPath(),
               file("dist/processing-core-${modeVersion}.jar.md5").toPath(), REPLACE_EXISTING)
}


// tasks.whenTaskAdded { task ->
//     if (task.name == 'build') {
//         task.finalizedBy copyArtifacts
//     }
// }

// task copyArtifacts(type: Copy) {
//     print '*********************'
//     print "$buildDir/outputs/aar"

//     from("$buildDir/outputs/aar") {
//         include "*.aar"
//     }
//     from("$buildDir/outputs/jar") {
//         include "*.jar"
//     }
//     into file("${rootProject.projectDir}/tmp/exploded")
//     doLast {
//         def path = ant.path {
//             fileset(dir: "${rootProject.projectDir}/tmp/exploded", includes: "*.aar, *.jar")
//         }
//         path.list().each {
//             println it
//         }
//     }
// }