apply plugin: 'com.android.application'

android {
    compileSdkVersion @@target_sdk@@
    buildToolsVersion "@@build_tools@@"
    defaultConfig {
        applicationId "@@package_name@@"
        minSdkVersion @@min_sdk@@
        targetSdkVersion @@target_sdk@@
        versionCode @@version_code@@
        versionName "@@version_name@@"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    
    // https://github.com/bytedeco/javacpp/issues/52#issuecomment-164472112
    // https://github.com/bytedeco/javacpp/wiki
    applicationVariants.all { variant ->
        variant.javaCompile.doFirst {
            // https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.JavaCompile.html
            println 'javaCompile ' + variant.name
            
            println "Source:"
            //def files = variant.javaCompile.source.getFiles().toArray();
            println variant.javaCompile.source.getAsPath()
            println "DestDir: " + variant.javaCompile.destinationDir            
            //println "Includes: " + variant.javaCompile.includes
            //println "Excludes: " + variant.javaCompile.excludes            
            //println "Options: " + variant.javaCompile.options.compilerArgs            
            //println "sourceCompatibility: " + variant.javaCompile.sourceCompatibility
            //println "targetCompatibility: " + variant.javaCompile.targetCompatibility            
            println "Classpath:" 
            println variant.javaCompile.classpath.getAsPath()
            //Set<File> paths = variant.javaCompile.classpath.getAsFileTree().getFiles()
            //println paths
            println "@@tools_folder@@/../modes/java/mode/jdtCompilerAdapter.jar"
                        
            List<String> argsList = ['-g',
                                     '-source', variant.javaCompile.sourceCompatibility, 
                                     '-target', variant.javaCompile.targetCompatibility, 
                                     '-d', variant.javaCompile.destinationDir] as String[]

            //variant.javaCompile.source.getFiles().toArray()
            argsList = argsList + variant.javaCompile.source.getAsPath().split(':').collect{it as String}

                                     
            print argsList                                             
                        
            // https://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_batch_compiler.htm
            // https://docs.gradle.org/3.5/dsl/org.gradle.api.tasks.JavaExec.html#org.gradle.api.tasks.JavaExec:main            
            javaexec {
                main 'org.eclipse.jdt.internal.compiler.batch.Main'
                classpath variant.javaCompile.classpath;
                args argsList
            }
            
            println 'javaCompile done'        
            println 'SKIPPING ' + variant.name
            throw new StopExecutionException("skip this task")
        }
        variant.javaCompile.doLast {
            
            println 'hi ' + variant.name            
            for (Action action: variant.javaCompile.actions) {
                println action.toString()
            }
            println 'done'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile fileTree(include: ['*.jar'], dir: '@@tools_folder@@/../modes/java/mode/')
    compile fileTree(include: ['*.jar'], dir: '@@target_platform@@')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:@@support_version@@'
    compile 'com.android.support:design:@@support_version@@'
    provided 'com.google.android.wearable:wearable:@@wear_version@@'
    compile 'com.google.android.support:wearable:@@wear_version@@'      
    testCompile 'junit:junit:4.12'
    compile files('libs/processing-core.jar')
}
